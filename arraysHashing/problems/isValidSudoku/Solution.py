
# 問題解説:
# 9x9の数独ボードが有効かどうか判定する問題です。
# 有効な数独とは、各行・各列・各3x3サブボックスに1〜9の数字が重複せず1回ずつしか現れないものです。
# 解法としては、各行・各列・各サブボックスごとに数字の出現を集合で管理し、重複があればFalseを返します。
# 空白（"."）は無視して判定します。

# defaultdictをインポート。デフォルト値付きの辞書を作成するために使用。
from collections import defaultdict
# 型ヒントをサポートするためにListをインポート
from typing import List

# Solutionクラスを定義
class Solution:
    # isValidSudokuメソッドは、数独ボードが有効かどうかを判定します。
    def isValidSudoku(self, board: List[List[str]]) -> bool:
        # 各列の中に含まれる数字を追跡するための辞書。キーは列番号、値はその列に含まれる数字の集合。
        cols = defaultdict(set)
        # 各行の中に含まれる数字を追跡するための辞書。キーは行番号、値はその行に含まれる数字の集合。
        rows = defaultdict(set)
        # 各3x3のサブボックスに含まれる数字を追跡するための辞書。
        # キーはタプル(r // 3, c // 3)で、各サブボックスを識別し、値はそのサブボックスに含まれる数字の集合。
        squares = defaultdict(set)  # (r // 3, c // 3)がサブボックスのキー

        # 9×9のボードを行（r）ごとにループ
        for r in range(9):  # 各行のインデックスrを0から8までループ
            for c in range(9):  # 各列のインデックスcを0から8までループ
                # 現在のセルが"."（空白）である場合、スキップして次のセルに移動
                if board[r][c] == ".":
                    continue  # continue文はループの残りをスキップし、次の反復に進む

                # 重複チェック：現在のセルの値が行、列、またはサブボックスにすでに存在する場合はFalseを返す
                if (board[r][c] in rows[r]  # 行rに重複がある場合
                    or board[r][c] in cols[c]  # 列cに重複がある場合
                    or board[r][c] in squares[(r // 3, c // 3)]):  # サブボックスに重複がある場合
                    return False  # 無効な数独ボードと判定し、Falseを返して終了
                
                # 現在のセルの値を対応する行、列、サブボックスの集合に追加（重複チェック済み）
                cols[c].add(board[r][c])  # 列cに現在のセルの値を追加
                rows[r].add(board[r][c])  # 行rに現在のセルの値を追加
                squares[(r // 3, c // 3)].add(board[r][c])  # サブボックスに現在のセルの値を追加

        # 全てのセルをチェックしても問題がなければ、Trueを返す
        return True

# 数独ボードの例
board = [
    ["5","3",".",".","7",".",".",".","."],
    ["6",".",".","1","9","5",".",".","."],
    [".","9","8",".",".",".",".","6","."],
    ["8",".",".",".","6",".",".",".","3"],
    ["4",".",".","8",".","3",".",".","1"],
    ["7",".",".",".","2",".",".",".","6"],
    [".","6",".",".",".",".","2","8","."],
    [".",".",".","4","1","9",".",".","5"],
    [".",".",".",".","8",".",".","7","9"]
]

# Solutionクラスのインスタンスを作成
solution = Solution()
# isValidSudokuメソッドを呼び出し、結果を出力する
print(solution.isValidSudoku(board))  # 出力がTrueなら有効な数独ボード、Falseなら無効な数独ボード
